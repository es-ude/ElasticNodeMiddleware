load("@EmbeddedSystemsBuildScripts//Unity:unity.bzl", "generate_a_unity_test_for_every_file", "mock", "unity_test")
load("@AvrToolchain//platforms/cpu_frequency:cpu_frequency.bzl", "cpu_frequency_flag")

cc_library(
    name = "BitManipulationHdrForTesting",
    hdrs = ["header_replacements/EmbeddedUtilities/BitManipulation.h"],
    strip_include_prefix = "header_replacements",
    visibility = ["//visibility:public"],
)

### <mocks ###

mock(
    name = "mock_Bitmanipulation",
    srcs = ["//test:header_replacements/EmbeddedUtilities/BitManipulation.h"],
    copts = ["-DTEST"],
    deps = [
        ":BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "CircularBufferHdr",
    hdrs = [
        "//src:uart/circularBuffer/circularBuffer.h",
    ],
)
mock(
    name = "mock_CircularBuffer",
    srcs = [
        "//src:uart/circularBuffer/circularBuffer.h",
    ],
    copts = ["-DTEST"],
    deps = [
        "CircularBufferHdr",
    ],
)

mock(
    name = "mock_Uart_internal",
    srcs = [
        "//src:uart/uart_internal.h",
    ],
    copts = ["-DTEST"],
)

cc_library(
    name = "Interrupt_ManagerHdr",
    hdrs = [
        "//src:interruptManager/interruptManager.h",
    ],
)
mock(
    name = "mock_InterruptManager",
    srcs = [
        "//src:interruptManager/interruptManager.h",
    ],
    copts = ["-DTEST"],
    deps = [
        "Interrupt_ManagerHdr",
    ],
)

cc_library(
    name = "Interrupt_ManagerMockHdr",
    hdrs = [
        "//src:interruptManager/interruptManager_avr_Mock.h"
    ],
)
mock(
    name = "mock_InterruptManager_avr_Mock",
    srcs = [
        "//src:interruptManager/interruptManager_avr_Mock.h",
    ],
    copts = ["-DTEST"],
    deps = [
        "Interrupt_ManagerMockHdr",
    ],
)

### mocks> ###

### <tests ###

# TODO: configuration

# TODO: controlmanager

# TODO: debug

# TODO: finish:
#unity_test(
#    file_name = "ElasticNodeMiddleware_Test.c",
#    cexception = False,
#    copts = ["-DTEST"],
#    deps = [
#        "mock_Bitmanipulation",
#        "//src:ElasticNodeMiddlewareTest",
#    ],
#)

unity_test(
    file_name = "ElasticNodeMiddleware_internal_Test.c",
    cexception = False,
    copts = ["-DTEST"],
    deps = [
        "mock_Bitmanipulation",
        "//src:ElasticNodeMiddleware_internalTest",
    ],
)

# TODO: ElasticNodeMiddlewareMonitoring

# TODO: flash

# TODO: implicit declaration
unity_test(
    file_name = "interrupt_manager_avr_Test.c",
    cexception = False,
    copts = ["-DTEST"],
    deps = [
        "mock_InterruptManager_avr_Mock",
        "//src:Interrupt_ManagerTest",
    ],
)

# TODO: led_mcu

# TODO: reconfigure_multiboot_avr

unity_test(
    file_name = "reconfigure_multiboot_internal_avr_Test.c",
    cexception = False,
    copts = ["-DTEST"],
    deps = [
        "//src:Reconfigure_multiboot_internal_avrTest",
    ],
)

# TODO: spi

# TODO: Fails
unity_test(
    file_name = "circularBuffer_Test.c",
    cexception = False,
    copts = ["-DTEST"],
    deps = [
        "mock_InterruptManager",
        "//src:CircularBufferTest",
    ],
)

# TODO: missing frequency flags?
unity_test(
    file_name = "uart_Test.c",
    cexception = False,
    copts = cpu_frequency_flag() + [ "-DTEST"],
    deps = [
        "mock_InterruptManager",
        "mock_Uart_internal",
        "mock_CircularBuffer",
        "//src:UartTest",
    ],
)

unity_test(
    file_name = "uart_internal_Test.c",
    cexception = False,
    copts = ["-DTEST"],
    deps = [
        "mock_CircularBuffer",
        "mock_InterruptManager",
        "//src:Uart_internalTest",
    ],
)

unity_test(
    file_name = "xmem_Test.c",
    cexception = False,
    copts = ["-DTEST"],
    deps = [
        "mock_Bitmanipulation",
        "//src:XmemTest",
    ],
)

### tests> ###
