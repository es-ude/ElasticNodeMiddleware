load("@AvrToolchain//platforms/cpu_frequency:cpu_frequency.bzl", "cpu_frequency_flag")

# set the -DF_CPU in the copts if some source file includes <util/delay.h>

cc_library(
    name = "ElasticNodeMiddlewareLib",
    srcs = [
        "src/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "src/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:BitmanipulationLib",
        "//:ElasticNodeMiddlewareLibHdr",
        "//:Reconfigure_multibootLib",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLib",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareInternalLib",
    srcs = [
        "src/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:BitmanipulationLib",
        "//:ElasticNodeMiddlewareInternalLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLib",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareInternalLibHdr",
    hdrs = [
        "src/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareLibTest",
    srcs = [
        "src/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "src/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "//:Reconfigure_MultibootLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "Reconfigure_multibootLib",
    srcs = [
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    copts = cpu_frequency_flag(),
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareInternalLib",
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLib",
        "//:Reconfigure_MultibootLibHdr",
        #"@EmbeddedUtilities//:BitManipulation",
        #        "//:BitmanipulationLib",
    ],
)

cc_library(
    name = "Reconfigure_multibootLibTest",
    srcs = [
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareInternalLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:Reconfigure_MultibootLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "XMemLib",
    srcs = ["src/xmem/xmem.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        #"@EmbeddedUtilities//:BitManipulation",
        "//:BitmanipulationLib",
    ],
)

cc_library(
    name = "XMemLibTest",
    srcs = ["src/xmem/xmem.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "Interrupt_ManagerLib",
    srcs = ["src/interruptManager/interruptManager_avr.c"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "Interrupt_ManagerLibTest",
    srcs = ["src/interruptManager/interruptManager_avr.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "UartLib",
    srcs = [
        "src/uart/uart.c",
        "src/uart/uart_internal.c",
    ],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLib",
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
        "//:UartLibHdr",
    ],
)

cc_library(
    name = "UartLibTest",
    srcs = [
        "src/uart/uart.c",
        "src/uart/uart_internal.c",
    ],
    copts = [
        "-DTEST",
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:UartLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLib",
    srcs = ["src/uart/circularBuffer/circularBuffer.c"],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLibTest",
    srcs = ["src/uart/circularBuffer/circularBuffer.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "BitmanipulationLib",
    visibility = ["//visibility:public"],
    deps = [
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "DebugUartLib",
    srcs = ["src/debug/debug.c"],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:DebugUartLibHdr",
        "//:UartLib",
    ],
)

cc_library(
    name = "DebugLufaLib",
    srcs = ["src/debug/debugUsb.c"],
    copts = cpu_frequency_flag() + [
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:DebugLufaLibHdr",
        "@PeripheralInterface//:LufaUsart",
    ],
)

cc_library(
    name = "ControlmanagerLib",
    srcs = ["src/controlmanager/controlmanager.c"],
    copts = cpu_frequency_flag(),
    visibility = ["//visibility:public"],
    deps = [
        "//:ConfigurationLib",
        "//:DebugLufaLib",
        "//:ElasticNodeMiddlewareLib",
        # needed?
        "//:FlashLib",
        "//:Reconfigure_multibootLib",
        "//:RegisterDefinitionLibHdr",
        "//:ControlmanagerLibHdr",
        "//:XMemLib",
        # added?
        "//:BitmanipulationLib",
        "//:SpiLib",
    ],
)

cc_library(
    name = "ConfigurationLib",
    srcs = ["src/configuration/configuration.c"],
    copts = cpu_frequency_flag(),
    visibility = ["//visibility:public"],
    deps = [
        "//:ConfigurationLibHdr",
        "//:DebugLufaLib",
        "//:ElasticNodeMiddlewareLib",
        "//:FlashLib",
        "//:Interrupt_ManagerLib",
        "//:LedLib",
    ],
)

cc_library(
    name = "FlashLib",
    srcs = ["src/flash/flash.c"],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:DebugLufaLib",
        "//:FlashLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:SpiLib",
    ],
)

cc_library(
    name = "SpiLib",
    srcs = ["src/spi/spi.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
        "//:SpiLibHdr",
        "//:XMemLib",
    ],
)

cc_library(
    name = "LedLib",
    srcs = ["src/led/led_mcu.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:BitmanipulationLib",
        "//:LedLibHdr",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareLibHdr",
    hdrs = [
        "ElasticNodeMiddleware/elasticNodeMiddleware.h",
        "src/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
    ],
)

#cc_library(
#    name = "ElasticNodeMiddleware_ConfigureFPGALibHdr",
#    hdrs = [
#        "src/elasticNodeMiddleware/elasticNodeMiddleware_configureFPGA.h",
#    ],
#    visibility = ["//visibility:public"],
#    deps = [
#        "//:Reconfigure_MultibootLibHdr",
#    ],
#)

cc_library(
    name = "Reconfigure_MultibootLibHdr",
    hdrs = [
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
    ],
)

cc_library(
    name = "XMemLibHdr",
    hdrs = ["src/xmem/xmem.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "Interrupt_ManagerLibHdr",
    hdrs = [
        "src/interruptManager/interruptManager.h",
        "src/interruptManager/interruptManager_avr_Mock.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "UartLibHdr",
    hdrs = [
        "src/uart/uart.h",
        "src/uart/uart_internal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLibHdr",
    hdrs = ["src/uart/circularBuffer/circularBuffer.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "RegisterDefinitionLibHdr",
    hdrs = [
        "src/pinDefinition/fpgaPins.h",
        "src/pinDefinition/fpgaRegisters.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "DebugUartLibHdr",
    hdrs = ["src/debug/debug.h"],
    visibility = ["//visibility:public"],
    deps = ["//:UartLibHdr"],
)

cc_library(
    name = "DebugLufaLibHdr",
    hdrs = ["src/debug/debug.h"],
    visibility = ["//visibility:public"],
    deps = [],
)
## new

cc_library(
    name = "ConfigurationLibHdr",
    hdrs = ["src/configuration/configuration.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:DebugLufaLibHdr",
        "//:ElasticNodeMiddlewareLibHdr",
        "//:FlashLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:LedLibHdr",
    ],
)

cc_library(
    name = "FlashLibHdr",
    hdrs = ["src/flash/flash.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:DebugLufaLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:SpiLibHdr",
    ],
)

cc_library(
    name = "SpiLibHdr",
    hdrs = ["src/spi/spi.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
    ],
)

cc_library(
    name = "ControlmanagerLibHdr",
    hdrs = ["src/controlmanager/controlmanager.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:ConfigurationLibHdr",
        "//:DebugLufaLibHdr",
        "//:ElasticNodeMiddlewareLibHdr",
        # needed?
        "//:FlashLibHdr",
        "//:Reconfigure_MultibootLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        # added
        "//:SpiLibHdr",
    ],
)

cc_library(
    name = "LedLibHdr",
    hdrs = ["src/led/led_mcu.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
    ],
)

exports_files(
    srcs = [
        "ElasticNodeMiddleware/elasticNodeMiddleware.h",
        "src/configuration/configuration.h",
        "src/controlmanager/controlmanager.h",
        "src/debug/debug.h",
        "src/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
        "src/flash/flash.h",
        "src/interruptManager/interruptManager.h",
        "src/interruptManager/interruptManager_avr_Mock.h",
        "src/led/led_mcu.h",
        "src/pinDefinition/fpgaPins.h",
        "src/pinDefinition/fpgaRegisters.h",
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "src/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
        "src/spi/spi.h",
        "src/uart/circularBuffer/circularBuffer.h",
        "src/uart/uart.h",
        "src/uart/uart_internal.h",
        "src/xmem/xmem.h",
    ],
    visibility = ["//visibility:public"],
)

py_library(
    name = "serial_test",
    srcs = ["scripts/serial_test.py"],
    visibility = ["//visibility:public"],
    deps = [
        "Configuration",
    ],
)

py_library(
    name = "Configuration",
    srcs = ["scripts/Configuration.py"],
    visibility = ["//visibility:public"],
    deps = [],
)

# executable python scripts as a binary
py_binary(
    name = "uploadMultiConfigS15",
    srcs = ["scripts/uploadMultiConfigS15.py"],
    visibility = ["//visibility:public"],
    deps = [
        "bitfileConfigs",
        "portConfigs",
        "serial_test",
    ],
)

py_library(
    name = "portConfigs",
    srcs = ["scripts/portConfigs.py"],
    visibility = ["//visibility:public"],
    deps = [
        "Configuration",
    ],
)

py_library(
    name = "bitfileConfigs",
    srcs = ["scripts/bitfileConfigs.py"],
    visibility = ["//visibility:public"],
    deps = [
        "Configuration",
    ],
)
